(iProject
Project
p0
(dp1
S'Files'
p2
(lp3
(iFile
File
p4
(dp5
S'Path'
p6
S'c:/dip/out/PDFMaker\\XmlParser.cs'
p7
sS'OriginalText'
p8
S'\xef\xbb\xbfusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Xml;\nusing PDFMaker.Parser.Elements;\nusing PDFMaker.Parser;\n\nnamespace PDFMaker\n{\n    public static class XmlParser\n    {\n        static  PdfDocument document;\n\n        public static int CalculateWidth(string s)\n        {\n            int width = -1;\n            if (s.Contains("%"))\n            {\n                int.TryParse(s.Replace("%", ""), out width);\n                width = (int)(((document.PageSize.Width - document.Margins[0] - document.Margins[1] )/ 100) * width);\n            }\n            else if (s.Contains("A4"))\n            {\n                int.TryParse(s.Replace("A4",""),out width);\n                width = width + Convert.ToInt32(iTextSharp.text.PageSize.A4.Width) - (int)document.Margins[0] - (int)document.Margins[1];\n            }\n            else\n                int.TryParse(s, out width);\n\n            return width;\n        }\n\n        public static int CalculateHeight(string s)\n        {\n            int height = -1;\n            if (s.Contains("%"))\n            {\n                int.TryParse(s.Replace("%", ""), out height);\n                height = (int)(((document.PageSize.Height-document.Margins[2] - document.Margins[3]) / 100) * height);\n            }\n            else if (s.Contains("A4"))\n            {\n                int.TryParse(s.Replace("A4", ""), out height);\n                height = height + Convert.ToInt32(iTextSharp.text.PageSize.A4.Height) - (int)document.Margins[2] - (int)document.Margins[3];\n            }\n            else\n                int.TryParse(s, out height);\n\n            return height;\n        }\n\n        public static void Parse(string path, string outputpath)\n        {            \n           XmlTextReader reader = new XmlTextReader(path);\n\n           document = new PdfDocument(outputpath);\n\n           string TextValue = "";\n           Section section = new Section();\n           Row row = new Row();\n           Column column = new Column();\n           Element element = new Element();\n\n           while (reader.Read())\n           {\n               switch (reader.NodeType)\n               {\n                   case XmlNodeType.Element:\n                       switch (reader.Name.ToLower())\n                       {\n                           #region Section\n                           case "section":\n                               section = new Section();\n                               while (reader.MoveToNextAttribute()) // Read the attributes.\n                               {\n                                   switch (reader.Name.ToLower())\n                                   {\n                                       case "label":\n                                           section.Label = reader.Value;\n                                           break;\n                                       case "width":\n                                           section.Width = CalculateWidth(reader.Value);\n                                           break;\n                                       case "height":\n                                           section.Height = CalculateHeight(reader.Value);\n                                           break;\n                                       case "fontsize":\n                                           section.FontSize = Convert.ToInt32(reader.Value);\n                                           break;\n                                       case "bgcolorcmyk":\n                                           List<int> tmp = new List<int>();\n                                           foreach (string color in reader.Value.Split(\',\'))\n                                           {\n                                               tmp.Add(Convert.ToInt32(color));\n                                           }\n                                           section.SetFillColor(tmp[0], tmp[1], tmp[2], tmp[3]);\n                                           break;\n                                       case "strokecolorcmyk":\n                                           List<int> tmp2 = new List<int>();\n                                           foreach (string color in reader.Value.Split(\',\'))\n                                           {\n                                               tmp2.Add(Convert.ToInt32(color));\n                                           }\n                                           section.SetStrokeColor(tmp2[0], tmp2[1], tmp2[2], tmp2[3]);\n                                           break;\n                                       case "marginssection":\n                                           section.Margins = new List<int>();\n                                           foreach (string color in reader.Value.Split(\',\'))\n                                           {\n                                               section.Margins.Add(Convert.ToInt32(color));\n                                           }\n                                           break;\n                                       case "textcolorcmyk":\n                                           List<int> tmp3 = new List<int>();\n                                           foreach (string color in reader.Value.Split(\',\'))\n                                           {\n                                               tmp3.Add(Convert.ToInt32(color));\n                                           }\n                                           section.SetLabelColor(tmp3[0], tmp3[1], tmp3[2], tmp3[3]);\n                                           break;\n                                   }\n                               }\n                               break;\n                           #endregion\n                           #region Row\n                           case "row":\n                               row = new Row();\n                               break;\n                           #endregion\n                           #region Column\n                           case "column":\n                               column = new Column();\n                               while (reader.MoveToNextAttribute())\n                                   switch (reader.Name.ToLower())\n                                   {\n                                       case "width":\n                                           column.Width=CalculateWidth(reader.Value);\n                                           break;\n                                       case "height":\n                                           column.Height = CalculateHeight(reader.Value);\n                                           break;\n                                       case "align":\n                                           column.Align=reader.Value;\n                                           break;\n                                       default:\n                                           throw new Exception();\n                                   }                                    \n                               break;\n                           #endregion\n                           #region Element\n                           case "element":\n                               reader.MoveToNextAttribute();\n                               if (reader.Name.ToLower() !="type")\n                                   throw new Exception();\n                               switch (reader.Value.ToLower())\n                               {\n                                   #region NamedField\n                                   case "namedfield":\n                                       NamedField el = new NamedField();\n                                       while (reader.MoveToNextAttribute())\n                                        switch (reader.Name.ToLower())\n                                        {\n                                            case "label":\n                                                el.Label.Text = reader.Value;\n                                                break;\n                                            case "labelfontsize":\n                                                el.Label.FontSize = Convert.ToInt32(reader.Value);\n                                                break;\n                                            case "fieldfontsize":\n                                                el.FieldFontSize = Convert.ToInt32(reader.Value);\n                                                break;\n                                            case "labelposition":\n                                                el.LabelPosition = reader.Value;\n                                                break;\n                                            case "labelwidth":\n                                                el.Label.Width = Convert.ToInt32(reader.Value);\n                                                break;\n                                            case "labelheight":\n                                                el.Label.Height = Convert.ToInt32(reader.Value);\n                                                break;\n                                            case "fieldwidth":\n                                                el.FieldWidth = Convert.ToInt32(reader.Value);\n                                                break;\n                                            case "fieldheight":\n                                                el.FieldHeight = Convert.ToInt32(reader.Value);\n                                                break;\n                                            case "align":\n                                                el.Align = reader.Value;\n                                                break;\n                                            default:\n                                                throw new Exception();\n                                            }\n                                       element = el;\n                                       break;\n                                   #endregion NamedField\n                                   #region Label\n                                   case "label":\n                                        Label lab = new Label();\n                                        while (reader.MoveToNextAttribute())\n                                            switch (reader.Name.ToLower())\n                                            {\n                                                case "labelfontsize":\n                                                    lab.FontSize = Convert.ToInt32(reader.Value);\n                                                    break;\n                                                case "align":\n                                                    lab.Align = reader.Value;\n                                                    break;\n                                                case "width":\n                                                    lab.Width = CalculateWidth(reader.Value);\n                                                    break;\n                                                case "height":\n                                                    lab.Height = CalculateHeight(reader.Value);\n                                                    break;\n                                                default:\n                                                    throw new Exception();\n\n                                            }\n                                        element = lab;\n                                       break;\n                                   #endregion label\n                                   case "field":\n                                       Field fil = new Field();\n\n                                       element = fil;\n                                       break;\n                                   case "spacing":\n                                       //element = new Spacing();\n                                       break;\n                                   default: \n                                       {\n                                           //var r = reader;\n                                           throw new Exception();\n                                           //break;\n                                       }\n                               }\n                               break;\n                           #endregion\n                       }                       \n                       break;\n                   case XmlNodeType.Text: \n                       TextValue = (reader.Value);\n                       break;\n                   case XmlNodeType.EndElement:\n                       switch (reader.Name.ToLower())\n                       {\n                           case "section":\n                               document.Sections.Enqueue(section);\n                               break;\n                           case "row":\n                               section.Rows.Enqueue(row);\n                               section.Rows.Enqueue(new RowSpace(8));\n                               break;\n                           case "column":\n                               row.Columns.Enqueue(column);\n                               break;\n                           case "element":\n                               element.Text = TextValue;\n                               TextValue = "";\n                               column.Elements.Enqueue(element);\n                               break;\n                           case "document":\n                               break;\n\n                       }\n                       break;\n               }\n           }\n           document.Save();\n        }\n    }\n}\n'
p9
sS'Comments'
p10
(lp11
sS'CleanCode'
p12
S'\xef\xbb\xbfusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Xml;\nusing PDFMaker.Parser.Elements;\nusing PDFMaker.Parser;\n\nnamespace PDFMaker\n{\n    public static class XmlParser\n    {\n        static  PdfDocument document;\n\n        public static int CalculateWidth(string s)\n        {\n            int width = -1;\n            if (s.Contains(<\xc2\xa7Comment ID=1\xc2\xa7>))\n            {\n                int.TryParse(s.Replace(<\xc2\xa7Comment ID=2\xc2\xa7>, <\xc2\xa7Comment ID=3\xc2\xa7>), out width);\n                width = (int)(((document.PageSize.Width - document.Margins[0] - document.Margins[1] )/ 100) * width);\n            }\n            else if (s.Contains(<\xc2\xa7Comment ID=4\xc2\xa7>))\n            {\n                int.TryParse(s.Replace(<\xc2\xa7Comment ID=5\xc2\xa7>,<\xc2\xa7Comment ID=6\xc2\xa7>),out width);\n                width = width + Convert.ToInt32(iTextSharp.text.PageSize.A4.Width) - (int)document.Margins[0] - (int)document.Margins[1];\n            }\n            else\n                int.TryParse(s, out width);\n\n            return width;\n        }\n\n        public static int CalculateHeight(string s)\n        {\n            int height = -1;\n            if (s.Contains(<\xc2\xa7Comment ID=7\xc2\xa7>))\n            {\n                int.TryParse(s.Replace(<\xc2\xa7Comment ID=8\xc2\xa7>, <\xc2\xa7Comment ID=9\xc2\xa7>), out height);\n                height = (int)(((document.PageSize.Height-document.Margins[2] - document.Margins[3]) / 100) * height);\n            }\n            else if (s.Contains(<\xc2\xa7Comment ID=10\xc2\xa7>))\n            {\n                int.TryParse(s.Replace(<\xc2\xa7Comment ID=11\xc2\xa7>, <\xc2\xa7Comment ID=12\xc2\xa7>), out height);\n                height = height + Convert.ToInt32(iTextSharp.text.PageSize.A4.Height) - (int)document.Margins[2] - (int)document.Margins[3];\n            }\n            else\n                int.TryParse(s, out height);\n\n            return height;\n        }\n\n        public static void Parse(string path, string outputpath)\n        {            \n           XmlTextReader reader = new XmlTextReader(path);\n\n           document = new PdfDocument(outputpath);\n\n           string TextValue = <\xc2\xa7Comment ID=13\xc2\xa7>;\n           Section section = new Section();\n           Row row = new Row();\n           Column column = new Column();\n           Element element = new Element();\n\n           while (reader.Read())\n           {\n               switch (reader.NodeType)\n               {\n                   case XmlNodeType.Element:\n                       switch (reader.Name.ToLower())\n                       {\n                           #region Section\n                           case <\xc2\xa7Comment ID=14\xc2\xa7>:\n                               section = new Section();\n                               while (reader.MoveToNextAttribute()) <\xc2\xa7Comment ID=57\xc2\xa7>\n                               {\n                                   switch (reader.Name.ToLower())\n                                   {\n                                       case <\xc2\xa7Comment ID=15\xc2\xa7>:\n                                           section.Label = reader.Value;\n                                           break;\n                                       case <\xc2\xa7Comment ID=16\xc2\xa7>:\n                                           section.Width = CalculateWidth(reader.Value);\n                                           break;\n                                       case <\xc2\xa7Comment ID=17\xc2\xa7>:\n                                           section.Height = CalculateHeight(reader.Value);\n                                           break;\n                                       case <\xc2\xa7Comment ID=18\xc2\xa7>:\n                                           section.FontSize = Convert.ToInt32(reader.Value);\n                                           break;\n                                       case <\xc2\xa7Comment ID=19\xc2\xa7>:\n                                           List<int> tmp = new List<int>();\n                                           foreach (string color in reader.Value.Split(<\xc2\xa7Comment ID=53\xc2\xa7>))\n                                           {\n                                               tmp.Add(Convert.ToInt32(color));\n                                           }\n                                           section.SetFillColor(tmp[0], tmp[1], tmp[2], tmp[3]);\n                                           break;\n                                       case <\xc2\xa7Comment ID=20\xc2\xa7>:\n                                           List<int> tmp2 = new List<int>();\n                                           foreach (string color in reader.Value.Split(<\xc2\xa7Comment ID=54\xc2\xa7>))\n                                           {\n                                               tmp2.Add(Convert.ToInt32(color));\n                                           }\n                                           section.SetStrokeColor(tmp2[0], tmp2[1], tmp2[2], tmp2[3]);\n                                           break;\n                                       case <\xc2\xa7Comment ID=21\xc2\xa7>:\n                                           section.Margins = new List<int>();\n                                           foreach (string color in reader.Value.Split(<\xc2\xa7Comment ID=55\xc2\xa7>))\n                                           {\n                                               section.Margins.Add(Convert.ToInt32(color));\n                                           }\n                                           break;\n                                       case <\xc2\xa7Comment ID=22\xc2\xa7>:\n                                           List<int> tmp3 = new List<int>();\n                                           foreach (string color in reader.Value.Split(<\xc2\xa7Comment ID=56\xc2\xa7>))\n                                           {\n                                               tmp3.Add(Convert.ToInt32(color));\n                                           }\n                                           section.SetLabelColor(tmp3[0], tmp3[1], tmp3[2], tmp3[3]);\n                                           break;\n                                   }\n                               }\n                               break;\n                           #endregion\n                           #region Row\n                           case <\xc2\xa7Comment ID=23\xc2\xa7>:\n                               row = new Row();\n                               break;\n                           #endregion\n                           #region Column\n                           case <\xc2\xa7Comment ID=24\xc2\xa7>:\n                               column = new Column();\n                               while (reader.MoveToNextAttribute())\n                                   switch (reader.Name.ToLower())\n                                   {\n                                       case <\xc2\xa7Comment ID=25\xc2\xa7>:\n                                           column.Width=CalculateWidth(reader.Value);\n                                           break;\n                                       case <\xc2\xa7Comment ID=26\xc2\xa7>:\n                                           column.Height = CalculateHeight(reader.Value);\n                                           break;\n                                       case <\xc2\xa7Comment ID=27\xc2\xa7>:\n                                           column.Align=reader.Value;\n                                           break;\n                                       default:\n                                           throw new Exception();\n                                   }                                    \n                               break;\n                           #endregion\n                           #region Element\n                           case <\xc2\xa7Comment ID=28\xc2\xa7>:\n                               reader.MoveToNextAttribute();\n                               if (reader.Name.ToLower() !=<\xc2\xa7Comment ID=29\xc2\xa7>)\n                                   throw new Exception();\n                               switch (reader.Value.ToLower())\n                               {\n                                   #region NamedField\n                                   case <\xc2\xa7Comment ID=30\xc2\xa7>:\n                                       NamedField el = new NamedField();\n                                       while (reader.MoveToNextAttribute())\n                                        switch (reader.Name.ToLower())\n                                        {\n                                            case <\xc2\xa7Comment ID=31\xc2\xa7>:\n                                                el.Label.Text = reader.Value;\n                                                break;\n                                            case <\xc2\xa7Comment ID=32\xc2\xa7>:\n                                                el.Label.FontSize = Convert.ToInt32(reader.Value);\n                                                break;\n                                            case <\xc2\xa7Comment ID=33\xc2\xa7>:\n                                                el.FieldFontSize = Convert.ToInt32(reader.Value);\n                                                break;\n                                            case <\xc2\xa7Comment ID=34\xc2\xa7>:\n                                                el.LabelPosition = reader.Value;\n                                                break;\n                                            case <\xc2\xa7Comment ID=35\xc2\xa7>:\n                                                el.Label.Width = Convert.ToInt32(reader.Value);\n                                                break;\n                                            case <\xc2\xa7Comment ID=36\xc2\xa7>:\n                                                el.Label.Height = Convert.ToInt32(reader.Value);\n                                                break;\n                                            case <\xc2\xa7Comment ID=37\xc2\xa7>:\n                                                el.FieldWidth = Convert.ToInt32(reader.Value);\n                                                break;\n                                            case <\xc2\xa7Comment ID=38\xc2\xa7>:\n                                                el.FieldHeight = Convert.ToInt32(reader.Value);\n                                                break;\n                                            case <\xc2\xa7Comment ID=39\xc2\xa7>:\n                                                el.Align = reader.Value;\n                                                break;\n                                            default:\n                                                throw new Exception();\n                                            }\n                                       element = el;\n                                       break;\n                                   #endregion NamedField\n                                   #region Label\n                                   case <\xc2\xa7Comment ID=40\xc2\xa7>:\n                                        Label lab = new Label();\n                                        while (reader.MoveToNextAttribute())\n                                            switch (reader.Name.ToLower())\n                                            {\n                                                case <\xc2\xa7Comment ID=41\xc2\xa7>:\n                                                    lab.FontSize = Convert.ToInt32(reader.Value);\n                                                    break;\n                                                case <\xc2\xa7Comment ID=42\xc2\xa7>:\n                                                    lab.Align = reader.Value;\n                                                    break;\n                                                case <\xc2\xa7Comment ID=43\xc2\xa7>:\n                                                    lab.Width = CalculateWidth(reader.Value);\n                                                    break;\n                                                case <\xc2\xa7Comment ID=44\xc2\xa7>:\n                                                    lab.Height = CalculateHeight(reader.Value);\n                                                    break;\n                                                default:\n                                                    throw new Exception();\n\n                                            }\n                                        element = lab;\n                                       break;\n                                   #endregion label\n                                   case <\xc2\xa7Comment ID=45\xc2\xa7>:\n                                       Field fil = new Field();\n\n                                       element = fil;\n                                       break;\n                                   case <\xc2\xa7Comment ID=46\xc2\xa7>:\n                                       <\xc2\xa7Comment ID=58\xc2\xa7>\n                                       break;\n                                   default: \n                                       {\n                                           <\xc2\xa7Comment ID=59\xc2\xa7>\n                                           throw new Exception();\n                                           <\xc2\xa7Comment ID=60\xc2\xa7>\n                                       }\n                               }\n                               break;\n                           #endregion\n                       }                       \n                       break;\n                   case XmlNodeType.Text: \n                       TextValue = (reader.Value);\n                       break;\n                   case XmlNodeType.EndElement:\n                       switch (reader.Name.ToLower())\n                       {\n                           case <\xc2\xa7Comment ID=47\xc2\xa7>:\n                               document.Sections.Enqueue(section);\n                               break;\n                           case <\xc2\xa7Comment ID=48\xc2\xa7>:\n                               section.Rows.Enqueue(row);\n                               section.Rows.Enqueue(new RowSpace(8));\n                               break;\n                           case <\xc2\xa7Comment ID=49\xc2\xa7>:\n                               row.Columns.Enqueue(column);\n                               break;\n                           case <\xc2\xa7Comment ID=50\xc2\xa7>:\n                               element.Text = TextValue;\n                               TextValue = <\xc2\xa7Comment ID=51\xc2\xa7>;\n                               column.Elements.Enqueue(element);\n                               break;\n                           case <\xc2\xa7Comment ID=52\xc2\xa7>:\n                               break;\n\n                       }\n                       break;\n               }\n           }\n           document.Save();\n        }\n    }\n}\n'
p13
sbasg6
S'c:\\dip\\in\\'
p14
sS'Name'
p15
S''
p16
sS'X'
p17
g16
sb.